
/*

Exercise 2: Error Handling

Scenario 1: Handle exceptions during fund transfers between accounts.
        ? Question: Write a stored procedure SafeTransferFunds that transfers funds between two accounts. 
            Ensure that if any error occurs (e.g., insufficient funds), an appropriate error message is logged 
            and the transaction is rolled back.
Scenario 2: Manage errors when updating employee salaries.
        ? Question: Write a stored procedure UpdateSalary that increases the salary of an employee by a given percentage. 
            If the employee ID does not exist, handle the exception and log an error message.
Scenario 3: Ensure data integrity when adding a new customer.
        ? Question: Write a stored procedure AddNewCustomer that inserts a new customer into the Customers table. 
            If a customer with the same ID already exists, handle the exception by logging an error and preventing 
            the insertion.

*/

--Scenario 1:
CREATE OR REPLACE PROCEDURE SafeTransferFunds (
    from_account_id IN NUMBER,
    to_account_id   IN NUMBER,
    amount          IN NUMBER
) AS
  insufficient_balance EXCEPTION;
  v_balance NUMBER;
BEGIN
  -- Check balance
  SELECT Balance INTO v_balance FROM Accounts WHERE AccountID = from_account_id;

  IF v_balance < amount THEN
    RAISE insufficient_balance;
  END IF;

  -- Deduct from sender
  UPDATE Accounts
  SET Balance = Balance - amount
  WHERE AccountID = from_account_id;

  -- Credit to receiver
  UPDATE Accounts
  SET Balance = Balance + amount
  WHERE AccountID = to_account_id;

  COMMIT;

  DBMS_OUTPUT.PUT_LINE(' Transfer successful: ₹' || amount || 
                       ' from Account ' || from_account_id || 
                       ' to Account ' || to_account_id);

EXCEPTION
  WHEN insufficient_balance THEN
    ROLLBACK;
    DBMS_OUTPUT.PUT_LINE(' Transfer failed: Insufficient balance in Account ' || from_account_id);

  WHEN OTHERS THEN
    ROLLBACK;
    DBMS_OUTPUT.PUT_LINE(' Transfer failed: ' || SQLERRM);
END;

SET SERVEROUTPUT ON;

BEGIN
  SafeTransferFunds(1, 2, 100); 
END;
--Scenariio 2

SET SERVEROUTPUT ON;

DECLARE
  emp_id NUMBER := 1;
  percent NUMBER := 10;
  current_salary NUMBER;
BEGIN
  SELECT Salary INTO current_salary
  FROM Employees
  WHERE EmployeeID = emp_id;

  UPDATE Employees
  SET Salary = Salary + (Salary * percent / 100)
  WHERE EmployeeID = emp_id;

  COMMIT;

  DBMS_OUTPUT.PUT_LINE(' Salary updated for Employee ID ' || emp_id || 
                       '. New Salary: ₹' || (current_salary + (current_salary * percent / 100)));

EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE(' Error: Employee with ID ' || emp_id || ' does not exist.');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE(' Unexpected error: ' || SQLERRM);
    ROLLBACK;
END;

--Scenario3

CREATE OR REPLACE PROCEDURE AddNewCustomer (
    p_customer_id IN NUMBER,
    p_name IN VARCHAR2,
    p_dob IN DATE,
    p_balance IN NUMBER
) AS
    duplicate_customer EXCEPTION;
    PRAGMA EXCEPTION_INIT(duplicate_customer, -1); -- ORA-00001: unique constraint violated
BEGIN
    INSERT INTO Customers (CustomerID, Name, DOB, Balance, LastModified)
    VALUES (p_customer_id, p_name, p_dob, p_balance, SYSDATE);

    COMMIT;

    DBMS_OUTPUT.PUT_LINE(' Customer "' || p_name || '" added successfully.');

EXCEPTION
    WHEN duplicate_customer THEN
        DBMS_OUTPUT.PUT_LINE(' Customer ID ' || p_customer_id || ' already exists. Insertion aborted.');

    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(' Unexpected error: ' || SQLERRM);
        ROLLBACK;
END;

SET SERVEROUTPUT ON;

BEGIN
  AddNewCustomer(15, 'Charlie Roy', TO_DATE('1995-08-12', 'YYYY-MM-DD'), 2000);
END;

BEGIN
  AddNewCustomer(1, 'Duplicate John', TO_DATE('1990-01-01', 'YYYY-MM-DD'), 5000);
END;

/*
